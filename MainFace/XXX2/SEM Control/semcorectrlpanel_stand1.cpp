// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "semcorectrlpanel_stand1.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"

/////////////////////////////////////////////////////////////////////////////
// CSemCoreCtrlPanel_Stand1

IMPLEMENT_DYNCREATE(CSemCoreCtrlPanel_Stand1, CSemCoreCtrlPanelCommonMap)

/////////////////////////////////////////////////////////////////////////////
// CSemCoreCtrlPanel_Stand1 properties

BOOL CSemCoreCtrlPanel_Stand1::GetCaptionVisible()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CSemCoreCtrlPanel_Stand1::SetCaptionVisible(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

OLE_COLOR CSemCoreCtrlPanel_Stand1::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CSemCoreCtrlPanel_Stand1::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

OLE_COLOR CSemCoreCtrlPanel_Stand1::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CSemCoreCtrlPanel_Stand1::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

COleFont CSemCoreCtrlPanel_Stand1::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CSemCoreCtrlPanel_Stand1::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

CString CSemCoreCtrlPanel_Stand1::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CSemCoreCtrlPanel_Stand1::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

BOOL CSemCoreCtrlPanel_Stand1::GetDebugInfoVisible()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CSemCoreCtrlPanel_Stand1::SetDebugInfoVisible(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

CString CSemCoreCtrlPanel_Stand1::GetXMinString()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CSemCoreCtrlPanel_Stand1::SetXMinString(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CSemCoreCtrlPanel_Stand1::GetXMaxString()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CSemCoreCtrlPanel_Stand1::SetXMaxString(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

short CSemCoreCtrlPanel_Stand1::GetControlStyle()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CSemCoreCtrlPanel_Stand1::SetControlStyle(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CSemCoreCtrlPanel_Stand1 operations

void CSemCoreCtrlPanel_Stand1::Bind(const VARIANT& ClassID, const VARIANT& SerialNumber)
{
	CSemCoreCtrlPanelCommonMap::Bind( ClassID, SerialNumber );

	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &ClassID, &SerialNumber);
}

void CSemCoreCtrlPanel_Stand1::Enable(const VARIANT& Enabled, const VARIANT& Flag)
{
	CSemCoreCtrlPanelCommonMap::Enable( Enabled, Flag );

	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Enabled, &Flag);
}

void CSemCoreCtrlPanel_Stand1::SetRange(const VARIANT& Xmin, const VARIANT& Xmax, const VARIANT& Ymin, const VARIANT& Ymax)
{
	CSemCoreCtrlPanelCommonMap::SetRange( Xmin, Xmax, Ymin, Ymax );

	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Xmin, &Xmax, &Ymin, &Ymax);
}

void CSemCoreCtrlPanel_Stand1::SetPos(const VARIANT& Xpos, const VARIANT& Ypos, const VARIANT& Flag)
{
	CSemCoreCtrlPanelCommonMap::SetPos( Xpos, Ypos, Flag );

	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Xpos, &Ypos, &Flag);
}

void CSemCoreCtrlPanel_Stand1::SyncPos(const VARIANT& Xpos, const VARIANT& Ypos, const VARIANT& Flag)
{
	CSemCoreCtrlPanelCommonMap::SyncPos( Xpos, Ypos, Flag );

	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Xpos, &Ypos, &Flag);
}

void CSemCoreCtrlPanel_Stand1::SyncText(LPCTSTR strX, LPCTSTR strY, const VARIANT& Flag)
{
	CSemCoreCtrlPanelCommonMap::SyncText(strX, strY, Flag);

	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_VARIANT;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strX, strY, &Flag);
}

void CSemCoreCtrlPanel_Stand1::SyncString(const VARIANT& ResourceID, const VARIANT& ResourceString)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		&ResourceID, &ResourceString);
}

void CSemCoreCtrlPanel_Stand1::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
